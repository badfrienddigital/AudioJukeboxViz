{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 CSS\
\
#source \{\
  display: none;\
\}\
\
#viz \{\
  position: relative;\
  width: 400px;\
  height: 300px;\
  margin: 3em auto;\
\}\
\
a \{\
  color: #3399ff;\
\}\
\
.viz-seg \{\
  position: absolute;\
  top: 0;\
  left: 0;\
  width: 100%;\
  height: 100%;\
  background-color: rgba(0,0,255,0.1);\
  border-radius: 50% 0;\
  will-change: transform;\
\}\
\
\
HTML\
\
  <div id="source">\
    <video width="280" height="120" id="src-vid" crossorigin="anonymous" loop autoplay controls>\
      <source src="https://dl.dropboxusercontent.com/u/42386473/cp/Holy%20Other%20-%20%20Inpouring.mp4" type="video/mp4">\
      You need an MP4-supporting browser.\
    </video>\
  </div>\
</div>\
\
\
\
JS\
// Create audio context\
var AUDIO = new (window.AudioContext || window.webkitAudioContext)();\
if(!AUDIO) console.error('Web Audio API not supported :(');\
\
// Create and configure analyzer node and storage buffer\
var analyzer = AUDIO.createAnalyser();\
analyzer.fftSize = 128;\
var bufferLength = analyzer.frequencyBinCount;\
var dataArray = new Uint8Array(bufferLength);\
\
// Cache HTML elements\
var vid = document.getElementById('src-vid'),\
    vizArea = document.getElementById('viz');\
\
// Creates a set of divs with graded BG colors.\
// Returns it as an array of jQuery-wrapped elements for\
// later manipulation.\
function createSegments(numSegments) \{\
  console.log('numSegments', numSegments);\
  var segCollection = [],\
      colorSlice = Math.floor(255 / numSegments);\
  \
  for(var i = 0; i < numSegments; i++) \{\
    var s = document.createElement('div');\
    s.classList.add('viz-seg');\
    var g = colorSlice * i,\
        r = 127 - (colorSlice * i);\
    \
    s.style.backgroundColor = 'rgba(' + r + ',' + g + ',255,0.1)';\
    vizArea.appendChild(s);\
    segCollection.push($(s));\
  \}\
  return segCollection;\
\}\
\
var $segs, rot = 0;\
\
// Main update/render method.\
// Gets the current frequency data and transforms the div set based on it.\
// Used jQuery because I'm too lazy to look up my transform-prefix shiv.\
function update() \{\
  analyzer.getByteFrequencyData(dataArray);\
  for(var i = 0; i < bufferLength; i++) \{\
    // Scaled based on frequency, staggered rotation\
    var segScale = dataArray[i] / 255,\
        segRotate = rot + (i * 3);\
    \
		$segs[i].css('transform', 'scale(' + (segScale) + ') rotate(' + segRotate + 'deg)'); \
  \}\
  if(++rot > 360) rot = 0;\
\}\
\
function init() \{\
  // Connect video to analyzer and analyzer to audio-out\
  console.log('init');\
  var source = AUDIO.createMediaElementSource(vid);\
  source.connect(analyzer);\
  analyzer.connect(AUDIO.destination);\
  \
  $segs = createSegments(bufferLength)\
  loop();\
\}\
\
// Main loop\
function loop() \{\
 	requestAnimationFrame(loop);\
  vid.play();\
  update();\
\}\
\
// Kick it off when the video is playable\
vid.addEventListener('loadeddata', init, false);}